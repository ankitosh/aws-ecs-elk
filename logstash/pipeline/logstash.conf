input {	
	s3 {
		region => "eu-west-1"
		access_key_id => "YOUR ACCESS KEY"
		secret_access_key => "YOUR SECRET KEY"
		bucket => "YOUR BUCKET NAME"
		interval => 360
		prefix => "PREFIX FOR YOUR FILES"
		exclude_pattern => "/(.+)not-included-file(.+)/"
		type => "s3_alb"
		sincedb_path => "/usr/share/logstash/sincedbs/s3_alb"
	}
}

input {
  tcp {
    port => 5000
  }
}

## Add your filters / logstash plugins configuration here

# input_redis

filter {
  grok {
    match => {
        "message" => "%{IPORHOST:[nginx][access][remote_ip]} - %{DATA:[nginx][access][user_name]} \[%{HTTPDATE:[nginx][access][time]}\]\"%{WORD:[nginx][access][method]} %{DATA:[nginx][access][url]} HTTP/%{NUMBER:[nginx][access][http_version]}\" %{NUMBER:[nginx][access][response_code]} %{NUMBER:[nginx][access][body_sent][bytes]}\"%{DATA:[nginx][access][referrer]}\" \"%{DATA:[nginx][access][agent]}\"\"%{NUMBER:[nginx][access][request_time]}\" \"%{NUMBER:[nginx][access][upstream_connect_time]}\""
    }
    remove_field => "message"
  }
mutate {
        add_field => { "read_timestamp" => "%{@timestamp}" }
      }
    date {
        match => [ "[nginx][access][time]", "dd/MMM/YYYY:H:m:s Z" ]
        remove_field => "[nginx][access][time]"
      }
    useragent {
        source => "[nginx][access][agent]"
        target => "[nginx][access][user_agent]"
        remove_field => "[nginx][access][agent]"
      }
    geoip {
        source => "[nginx][access][remote_ip]"
        target => "[nginx][access][geoip]"
      }
	grok {
		match => ["message", 
			'%{NOTSPACE:request_type} %{TIMESTAMP_ISO8601:response_timestamp} %{NOTSPACE:alb_name} %{NOTSPACE:client} %{NOTSPACE:target} %{NOTSPACE:request_processing_time:float} %{NOTSPACE:target_processing_time:float} %{NOTSPACE:response_processing_time:float} %{NOTSPACE:elb_status_code} %{NOTSPACE:target_status_code} %{NOTSPACE:received_bytes:float} %{NOTSPACE:sent_bytes:float} %{QUOTEDSTRING:request} %{QUOTEDSTRING:user_agent} %{NOTSPACE:ssl_cipher} %{NOTSPACE:ssl_protocol} %{NOTSPACE:target_group_arn} %{QUOTEDSTRING:trace_id} "%{DATA:domain_name}" "%{DATA:chosen_cert_arn}" %{NUMBER:matched_rule_priority:int} %{TIMESTAMP_ISO8601:request_creation_time} "%{DATA:actions_executed}" "%{DATA:redirect_url}"( "%{DATA:error_reason}")?'
		]
	}	

	mutate {
		add_field => { "loadbalancer_log" => "%{message}" }
		remove_field => ["message"]
	}

	mutate {
		remove_field => ["actions_executed", "redirect_url", "chosen_cert_arn", "domain_name", "error_reason", "matched_rule_priority", "target_group_arn", "ssl_cipher", "ssl_protocol" ]
	}

	date {
		match  => [ "response_timestamp", ISO8601 ]
	}
	
	mutate {
		gsub => [
			"request", '"', "",
			"trace_id", '"', "",
			"user_agent", '"', ""
		]
	}

	if [target] {
		grok {
			match => ["target", "(%{IPORHOST:target_ip})?(:)?(%{INT:target_port})?"]
		}
		mutate {
			remove_field => ["target" ]
		}
	}

	if [request] {
		grok {
			match => ["request", "(%{NOTSPACE:http_method})? (%{NOTSPACE:http_uri})? (%{NOTSPACE:http_version})?"]
		}
		mutate {
			remove_field => ["request", "http_version" ]
		}
	}		

	if [http_uri] {
		grok {
			match => ["http_uri", "(%{WORD:protocol})?(://)?(%{IPORHOST:domain})?(:)?(%{INT:http_port})?(%{GREEDYDATA:request_uri})?"]
		}
		mutate {
			remove_field => ["http_uri" ]
		}
	}

	if [client] {
		grok {
			match => ["client", "(%{IPORHOST:client_ip})?"]
		}
		mutate {
			remove_field => ["client" ]
		}
	}

	if [trace_id] {
		grok {
			match => [ "trace_id", "(Self=%{NOTSPACE:trace_id_self})?(;)?Root=%{NOTSPACE:trace_id_root}" ]
		}
		mutate {
			remove_field => ["trace_id" ]
		}
	}

	mutate {
		add_field => { "[@metadata][domain]" => "%{domain}" }
		add_field => { "[@metadata][alb_name]" => "%{alb_name}" }

		remove_field => ["type", "tags" ]
	}
	
	
}

output {
  elasticsearch {
    hosts => "YOUR DOMAIN NAME:9200"
    index => "nginx"
  }
}